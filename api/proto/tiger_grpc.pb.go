// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tiger.proto

package tigerv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TigerhallKittensServiceClient is the client API for TigerhallKittensService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TigerhallKittensServiceClient interface {
	// GetTigers API retrieve tigers data from database
	GetTigers(ctx context.Context, in *GetTigersRequest, opts ...grpc.CallOption) (*GetTigersResponse, error)
	// CreateTiger API create a new tiger in database
	CreateTiger(ctx context.Context, in *CreateTigerRequest, opts ...grpc.CallOption) (*CreateTigerResponse, error)
	// GetSightings API retrieve sightings data from database
	GetSightings(ctx context.Context, in *GetSightingsRequest, opts ...grpc.CallOption) (*GetSightingsResponse, error)
	// CreateSighting API create a new sighting in database
	CreateSighting(ctx context.Context, in *CreateSightingRequest, opts ...grpc.CallOption) (*CreateSightingResponse, error)
}

type tigerhallKittensServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTigerhallKittensServiceClient(cc grpc.ClientConnInterface) TigerhallKittensServiceClient {
	return &tigerhallKittensServiceClient{cc}
}

func (c *tigerhallKittensServiceClient) GetTigers(ctx context.Context, in *GetTigersRequest, opts ...grpc.CallOption) (*GetTigersResponse, error) {
	out := new(GetTigersResponse)
	err := c.cc.Invoke(ctx, "/tiger.v1.TigerhallKittensService/GetTigers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerhallKittensServiceClient) CreateTiger(ctx context.Context, in *CreateTigerRequest, opts ...grpc.CallOption) (*CreateTigerResponse, error) {
	out := new(CreateTigerResponse)
	err := c.cc.Invoke(ctx, "/tiger.v1.TigerhallKittensService/CreateTiger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerhallKittensServiceClient) GetSightings(ctx context.Context, in *GetSightingsRequest, opts ...grpc.CallOption) (*GetSightingsResponse, error) {
	out := new(GetSightingsResponse)
	err := c.cc.Invoke(ctx, "/tiger.v1.TigerhallKittensService/GetSightings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tigerhallKittensServiceClient) CreateSighting(ctx context.Context, in *CreateSightingRequest, opts ...grpc.CallOption) (*CreateSightingResponse, error) {
	out := new(CreateSightingResponse)
	err := c.cc.Invoke(ctx, "/tiger.v1.TigerhallKittensService/CreateSighting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TigerhallKittensServiceServer is the server API for TigerhallKittensService service.
// All implementations should embed UnimplementedTigerhallKittensServiceServer
// for forward compatibility
type TigerhallKittensServiceServer interface {
	// GetTigers API retrieve tigers data from database
	GetTigers(context.Context, *GetTigersRequest) (*GetTigersResponse, error)
	// CreateTiger API create a new tiger in database
	CreateTiger(context.Context, *CreateTigerRequest) (*CreateTigerResponse, error)
	// GetSightings API retrieve sightings data from database
	GetSightings(context.Context, *GetSightingsRequest) (*GetSightingsResponse, error)
	// CreateSighting API create a new sighting in database
	CreateSighting(context.Context, *CreateSightingRequest) (*CreateSightingResponse, error)
}

// UnimplementedTigerhallKittensServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTigerhallKittensServiceServer struct {
}

func (UnimplementedTigerhallKittensServiceServer) GetTigers(context.Context, *GetTigersRequest) (*GetTigersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTigers not implemented")
}
func (UnimplementedTigerhallKittensServiceServer) CreateTiger(context.Context, *CreateTigerRequest) (*CreateTigerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTiger not implemented")
}
func (UnimplementedTigerhallKittensServiceServer) GetSightings(context.Context, *GetSightingsRequest) (*GetSightingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSightings not implemented")
}
func (UnimplementedTigerhallKittensServiceServer) CreateSighting(context.Context, *CreateSightingRequest) (*CreateSightingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSighting not implemented")
}

// UnsafeTigerhallKittensServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TigerhallKittensServiceServer will
// result in compilation errors.
type UnsafeTigerhallKittensServiceServer interface {
	mustEmbedUnimplementedTigerhallKittensServiceServer()
}

func RegisterTigerhallKittensServiceServer(s grpc.ServiceRegistrar, srv TigerhallKittensServiceServer) {
	s.RegisterService(&TigerhallKittensService_ServiceDesc, srv)
}

func _TigerhallKittensService_GetTigers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTigersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerhallKittensServiceServer).GetTigers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiger.v1.TigerhallKittensService/GetTigers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerhallKittensServiceServer).GetTigers(ctx, req.(*GetTigersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerhallKittensService_CreateTiger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTigerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerhallKittensServiceServer).CreateTiger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiger.v1.TigerhallKittensService/CreateTiger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerhallKittensServiceServer).CreateTiger(ctx, req.(*CreateTigerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerhallKittensService_GetSightings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSightingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerhallKittensServiceServer).GetSightings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiger.v1.TigerhallKittensService/GetSightings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerhallKittensServiceServer).GetSightings(ctx, req.(*GetSightingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TigerhallKittensService_CreateSighting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSightingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TigerhallKittensServiceServer).CreateSighting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiger.v1.TigerhallKittensService/CreateSighting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TigerhallKittensServiceServer).CreateSighting(ctx, req.(*CreateSightingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TigerhallKittensService_ServiceDesc is the grpc.ServiceDesc for TigerhallKittensService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TigerhallKittensService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tiger.v1.TigerhallKittensService",
	HandlerType: (*TigerhallKittensServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTigers",
			Handler:    _TigerhallKittensService_GetTigers_Handler,
		},
		{
			MethodName: "CreateTiger",
			Handler:    _TigerhallKittensService_CreateTiger_Handler,
		},
		{
			MethodName: "GetSightings",
			Handler:    _TigerhallKittensService_GetSightings_Handler,
		},
		{
			MethodName: "CreateSighting",
			Handler:    _TigerhallKittensService_CreateSighting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tiger.proto",
}
